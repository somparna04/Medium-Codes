# Notebook 3: Conjugate Priors (Triplet Visuals)
# Author: Somparna 
# Each section shows Prior, Likelihood, and Posterior side-by-side.

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import beta, binom, gamma, poisson, norm, invgamma, dirichlet, multinomial, expon

# ---------------------------
# 1. Beta–Binomial
# ---------------------------
n, x = 10, 7
a0, b0 = 2, 2
a_post, b_post = a0 + x, b0 + n - x
p = np.linspace(0,1,500)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].plot(p, beta.pdf(p, a0, b0), 'b-', lw=2); axs[0].set_title("Prior: Beta(2,2)")
axs[1].plot(p, binom.pmf(x, n, p)*50, 'g--', lw=2); axs[1].set_title("Likelihood (scaled)")
axs[2].plot(p, beta.pdf(p, a_post, b_post), 'r-', lw=2); axs[2].set_title(f"Posterior: Beta({a_post},{b_post})")
for ax in axs: ax.set_xlabel("p"); ax.grid(alpha=0.3)
plt.suptitle("Beta Prior + Binomial Likelihood → Beta Posterior", fontsize=14); plt.show()

# ---------------------------
# 2. Gamma–Poisson
# ---------------------------
data = [3,2,4,0,1]
n, s = len(data), sum(data)
a0, b0 = 2, 1
a_post, b_post = a0 + s, b0 + n
lam = np.linspace(0,10,500)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].plot(lam, gamma.pdf(lam, a0, scale=1/b0), 'b-', lw=2); axs[0].set_title("Prior: Gamma(2,1)")
axs[1].bar(data, [1/len(data)]*len(data), color='g', alpha=0.6); axs[1].set_title("Likelihood (counts)")
axs[2].plot(lam, gamma.pdf(lam, a_post, scale=1/b_post), 'r-', lw=2); axs[2].set_title(f"Posterior: Gamma({a_post},{b_post})")
for ax in axs: ax.set_xlabel("λ"); ax.grid(alpha=0.3)
plt.suptitle("Gamma Prior + Poisson Likelihood → Gamma Posterior", fontsize=14); plt.show()

# ---------------------------
# 3. Gamma–Exponential (rate λ)
# ---------------------------
rng = np.random.default_rng(0)
lambda_true = 0.8
data = rng.exponential(scale=1/lambda_true, size=30)
n, s = len(data), data.sum()
a0, b0 = 2, 1
a_post, b_post = a0 + n, b0 + s
lam = np.linspace(0,3,500)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].plot(lam, gamma.pdf(lam, a0, scale=1/b0), 'b-', lw=2); axs[0].set_title("Prior: Gamma(2,1)")
axs[1].hist(data, bins=15, density=True, alpha=0.6, color='g'); axs[1].set_title("Likelihood (data histogram)")
axs[2].plot(lam, gamma.pdf(lam, a_post, scale=1/b_post), 'r-', lw=2); axs[2].set_title(f"Posterior: Gamma({a_post},{b_post:.1f})")
for ax in axs: ax.set_xlabel("λ"); ax.grid(alpha=0.3)
plt.suptitle("Gamma Prior + Exponential Likelihood → Gamma Posterior", fontsize=14); plt.show()

# ---------------------------
# 4. Normal–Normal (mean, known variance)
# ---------------------------
data = [5.1,4.9,5.0,5.2]
n, xbar = len(data), np.mean(data)
sigma2 = 1
mu0, tau2 = 4.0, 1.0
tau_n2 = 1/(1/tau2 + n/sigma2)
mu_n = tau_n2*(mu0/tau2 + n*xbar/sigma2)
x = np.linspace(2,7,500)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].plot(x, norm.pdf(x, mu0, np.sqrt(tau2)), 'b-', lw=2); axs[0].set_title("Prior: N(4,1)")
axs[1].plot(x, norm.pdf(x, xbar, np.sqrt(sigma2/n)), 'g--', lw=2); axs[1].set_title("Likelihood (scaled)")
axs[2].plot(x, norm.pdf(x, mu_n, np.sqrt(tau_n2)), 'r-', lw=2); axs[2].set_title(f"Posterior: N({mu_n:.2f},{tau_n2:.2f})")
for ax in axs: ax.set_xlabel("μ"); ax.grid(alpha=0.3)
plt.suptitle("Normal Prior + Normal Likelihood → Normal Posterior", fontsize=14); plt.show()

# ---------------------------
# 5. Inverse-Gamma–Normal (variance, known mean)
# ---------------------------
data = [2.1,2.3,1.9,2.0]
n, mu = len(data), 2.0
ss = sum((np.array(data)-mu)**2)
a0, b0 = 2, 2
a_post, b_post = a0 + n/2, b0 + ss/2
sigma2 = np.linspace(0.01,3,500)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].plot(sigma2, invgamma.pdf(sigma2, a0, scale=b0), 'b-', lw=2); axs[0].set_title("Prior: Inv-Gamma(2,2)")
axs[1].hist([(d-mu)**2 for d in data], bins=5, alpha=0.6, color='g'); axs[1].set_title("Likelihood (squared deviations)")
axs[2].plot(sigma2, invgamma.pdf(sigma2, a_post, scale=b_post), 'r-', lw=2); axs[2].set_title(f"Posterior: Inv-Gamma({a_post:.1f},{b_post:.1f})")
for ax in axs: ax.set_xlabel("σ²"); ax.grid(alpha=0.3)
plt.suptitle("Inv-Gamma Prior + Normal Likelihood → Inv-Gamma Posterior", fontsize=14); plt.show()

# ---------------------------
# 6. Dirichlet–Multinomial
# ---------------------------
x_obs = np.array([5,3,2])
alpha0 = np.array([1,1,1])
alpha_post = alpha0 + x_obs
samples_prior = dirichlet.rvs(alpha0, size=2000)
samples_post = dirichlet.rvs(alpha_post, size=2000)

fig, axs = plt.subplots(1,3,figsize=(15,4))
axs[0].scatter(samples_prior[:,0], samples_prior[:,1], alpha=0.3, s=10, color='b'); axs[0].set_title("Prior: Dirichlet(1,1,1)")
axs[1].bar(range(len(x_obs)), x_obs, color='g'); axs[1].set_title("Likelihood: Multinomial counts")
axs[2].scatter(samples_post[:,0], samples_post[:,1], alpha=0.3, s=10, color='r'); axs[2].set_title(f"Posterior: Dirichlet{tuple(alpha_post)}")
for ax in axs: ax.set_xlabel("p1"); ax.set_ylabel("p2"); ax.grid(alpha=0.3)
plt.suptitle("Dirichlet Prior + Multinomial Likelihood → Dirichlet Posterior", fontsize=14); plt.show()
